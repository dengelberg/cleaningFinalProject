vec
vec$set(10)
vec$get()
vec$set(1:10)
vec$get()
vec$getmean()
vec$setmean()
vec$setmean(mean(vec$get()))
vec$setmean()
vec$getmean()
source('~/Coursera/ProgrammingAssignment2/cachemean.R')
cachemean(vec)
cachemean(1:20)
vec2 <- 1:34
vec2 <- makeVector(1:34)
cachemean(vec2)
my_matrix
my_matrix2
my_matrix3 <- matrix(data = 1:4, nrow = 2, ncol = 2)
my_matrix3
cachMat <- makeCacheMatrix(my_matrix3)
cacheMat <- makeCacheMatrix(my_matrix3)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheMat <- makeCacheMatrix(my_matrix3)
cacheMat$get()
cacheMat$getInverse()
cacheMat$setInverse(cacheSolve(cacheMat$get))
solve(my_matrix3)
cacheMat$getInverse()
cacheSolve(cacheMat$get)
cacheMat$get
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(my_matrix3)
testMatrix <- makeCacheMatrix(my_matrix3)
testMatrix$get()
testMatrix$set(testMatrix$setInverse())
inverseTestMatrix <- testMatrix$set(testMatrix$setInverse())
inverseTestMatrix
testMatrix$get()
testMatrix$set(my_matrix3
)
testMatrix$get()
testMatrix$setInverse(matrix(data = 1:4, nrow = 2, ncol = 2))
testMatrix$set(my_matrix3)
inverseTestMatrix <- testMatrix$set(testMatrix$setInverse())
inverseTestMatrix
testMatrix$set(testMatrix$setInverse())
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
testMatrix$set(testMatrix$setInverse())
testMatrix$getInverse()
testMatrix$set(testMatrix$setInverse())
testMatrix$get()
testMatrix$set(my_matrix3)
testMatrix$get()
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
testMatrix$get()
testMatrix$getInverse()
testMatrix$get()
cacheSolve(testMatrix)
cacheSolve(testMatrix$get())
testMatrix$get()
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testMatrix$get())
testMatrix$get()
testMatrix$getInverse()
testMatrix$setInverse()
testMatrix$get()
testMatrix$setInverse(1)
testMatrix$getInverse()
testMatrix$setInverse(testMatrix$get())
testMatrix$get()
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
testMatrix$setInverse(testMatrix$get())
testMatrix$getInverse()
testMatrix$get()
solve(testMatrix$get())
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
testMatrix <- makeCacheMatrix(my_matrix2)
testMatrix
testMatrix.get()
testMatrix <- makeCacheMatrix()
testMatrix.set(my_matrix)
testMatrix$set(my_matrix)
testMatrix$get()
testMatrix$set(my_matrix3)
testMatrix$get()
testMatrix$getInverse()
iMat <- cacheSolve(my_matrix3)
testMatrix$setInverse(cacheSolve(testMatrix))
cacheSolve(testMatrix)
cacheSolve(testMatrix.get())
cacheSolve(testMatrix$get())
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testMatrix)
testMatrix.get()
testMatrix$get()
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachemean.R')
myVect <- makeVector(c(1,200,34,67,84,23,76,4))
myVect.get()
myVect$get()
myVect$getmean()
cachemean(myVect)
myVect$getmean()
myVect$setmean(10)
myVect$getmean()
cachemean(myVect)
myVect <- makeVector(c(1,200,34,67,84,23,76,4))
myVect$getmean()
cachemean(myVect)
cachemean(myVect)
myVect$setmean("hello")
cachemean(myVect)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cachemean(testMatrix)
testMatrix
testMatrix$get()
cachemean(testMatrix)
debugger(cachemean(testMatrix))
debugger(cacheSolve(testMatrix))
debug(cacheSolve(testMatrix))
debug(cacheSolve())
cacheSolve(testMatrix)
traceback()
debug(cacheSolve)
cacheSolve(testMatrix)
p
l
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
testMatrix <- makeCacheMatrix(my_matrix)
testMatrix$get()
cacheSolve(testMatrix)
debug(cacheSolve)
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testMatrix)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plou(y)
plot(y)
x
e
y
library(httr)
?myapp
?oauth_app
myapp = oauth_app("github", key = "2fd6dcf4428318747491", secret = "0ce22fd8c3a67268569c558c8f750e7dc23f6269")
?sign_oauth1.0
sig = sign_oauth1.0(myapp, token = "dengelberg", token_secret = "Oseh5261")
homeTL = GET("https://api.github.com/users/jtleek/repos", sig)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
source('~/Coursera/DataScience/R Programming/Hospital Quality/best.R')
source('~/Coursera/DataScience/R Programming/Hospital Quality/best.R')
best(MD, "heart attack")
dir()
ls()
setwd("./coursera")
getwd()
setwd("./DataScience/R Programming/Hospital Quality"
)
getwd()
best("MD", "heart attacl")
best("MD", "heart attack")
best("QQ", "heart attack")
source('~/Coursera/DataScience/R Programming/Hospital Quality/best.R')
setwd(".")
getwd()
setwd("..")
setwd("..")
setwd("..")
getwd()
setwd("./data")
dir()
setwd("./datascience")
dir()
setwd("./code")
read.csv(C:/Users/Daniel/Documents/data/restaurants.csv)
read.csv(C://Users/Daniel/Documents/data/restaurants.csv)
read.csv(C:Users/Daniel/Documents/data/restaurants.csv)
setwd(..)
setwd("..")
setwd("..")
getwd()
setwd("..")
restData <- read.csv("./data/restaurants.csv")
restData
s1 <- seq(1, 10, by = 2) ; s1
s2 <- seq(1, 10, length = 3); s2
x <- c(1, 3, 8, 25, 100); seq(along = x)
restData$nearMe = restData$neighborhood %in% c("Roland Park, "Homeland"")
restData$nearMe = restData$neighborhood %in% c("Roland Park, "Homeland")
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipGroups = cut(restData$zipCode, breaks = quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode, g = 4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes","no"), size = 10, replace = TRUE)
yesnofac = factor(yesno, levels = c("yes", "no"))
relevel(yesnofac, ref = "yes")
as.numeric(yesnofac)
library(plyr)
restData2 = mutate(restData, zipGroups = cut2(zipCode, g = 4))
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
mtcars$carname <- rowname(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id = c("carname, "gear", "cyl""), measure.vars = c("mpg", "hp"))
carMelt <- melt(mtcars, id = c("carname, "gear", "cyl"), measure.vars = c("mpg", "hp"))
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt, n = 3)
tail(carMelt, n = 3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns = split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns, sum)
ddply(InsectSprays,.(spray),summary,sum = sum(count))
ddply(InsectSprays,.(spray),summarize,sum = sum(count))
spaySums <- ddply(InsectSprays,.(spray),summarize,sum = ave(count, FUN = sum))
sim(spraySums)
dim(spraySums)
dim(spaySums)
head(spaySums)
install.packages("dplyer")
library(dplyer)
dplyr
library(dplyr)
install.packages("dplyr")
library(dplyr)
chicago <- raedRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
dim(chicago)
chicago <- readRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
readRDS("chicago.rds")
if(!file.exists("./data")){dir.create"./data")}
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 = "http://dl.dropboxuserontent.com/u/7710864/data/reviews-arp29.csv"
fileUrl1 = "http://dl.dropboxuserontent.com/u/7710864/data/solutions-arp29.csv"
fileUrl1 = "http://dl.dropboxuserontent.com/u/7710864/data/reviews-arp29.csv"
fileUrl2 = "http://dl.dropboxuserontent.com/u/7710864/data/solutions-arp29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv", method = "curl")
download.file(fileUrl1, destfile = "./data/reviews.csv")
fileUrl1 = "http://dl.dropboxusercontent.com/u/7710864/data/reviews-arp29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv")
source('~/Coursera/DataScience/R Programming/Hospital Quality/best.R')
swirl()
library(swirl)
swirl()
swirl()
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dyplr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
print(tbl_df)
cran
?select
select(cran, ap_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = sime_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran, version)
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrage(top_unique, unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
submit()
submit()
library(datasets)
hist(airquality$0zone)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
par(bg = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
par(bg = "white")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
par("lty")
par("col")
par("bg")
par("mar")
par("mfrow")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone, maine = "Zone and Wind in New York City"))
with(airquality, plot(Wind, Ozone, main = "Zone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, points(Wind, Ozone, col = "blue")))
abline(model, lwd = 2)
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, { plot(Wind, Ozone, main = "Ozone and wind")})
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
with(airqulity, plot(Solar.R, Ozone, main = "Ozone and Solar Radiation"))
with(airquality, plot(Solar.R, Ozone, main = "Ozone and Solar Radiation"))
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
setwd("./Coursera/DataScience/Getting and Cleaning Data/Final_Project")
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
names(completeData)
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
names(completeData)
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
names(completeData)
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
names(completeData)
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
names(completeData)
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
names(completeData)
testComplete <- completeData
?summarise
summarise(testComplete)
summarise(testComplete$Activities)
summarise(testComplete$`tBodyAccMag-mean()`)
newdata <- ddply(testComplete,.(Activity), fBodyBodyGyroMag-mean() = mean(fBodyBodyGyroMag-mean()))
names(testComplete) <- sub("\\(\\)", "", names(testComplete))
names(testComplete)
?summarise_each
summarise_each(testComplete,mean(), [3:ncol(testComplete)])
summarise_each(testComplete,mean(), 3:ncol(testComplete))
summarise_each(testComplete,mean(), testComplete$3:testComplete$ncol(testComplete))
testData <- group_by(testComplete, Activities)
head(testData)
testData2 <- summarise_each(testData,funs(mean))
head(testData2)
?group_by
testData <- group_by(testComplete, Activities, Subjects)
testData2 <- summarise_each(testData,funs(mean))
head(testData2)
testData$Activities
testData2$Activities
?write.table
source('~/Coursera/DataScience/Getting and Cleaning Data/Final_Project/run_analysis.R')
